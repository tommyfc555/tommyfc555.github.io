module.exports = (db, bcrypt, jwt, JWT_SECRET) => {
    const router = require('express').Router();

    // Test route
    router.get('/test', (req, res) => {
        res.json({ message: 'Auth API is working!' });
    });

    // Register
    router.post('/register', async (req, res) => {
        const { username, email, password, hwid } = req.body;

        try {
            // Basic validation
            if (!username || !email || !password || !hwid) {
                return res.status(400).json({ error: 'All fields are required' });
            }

            if (username.length < 3) {
                return res.status(400).json({ error: 'Username must be at least 3 characters' });
            }

            if (password.length < 6) {
                return res.status(400).json({ error: 'Password must be at least 6 characters' });
            }

            const hashedPassword = await bcrypt.hash(password, 10);
            
            db.run(
                'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
                [username, email, hashedPassword],
                function(err) {
                    if (err) {
                        return res.status(400).json({ error: 'User already exists' });
                    }
                    
                    const userId = this.lastID;
                    
                    // Store HWID
                    db.run(
                        'INSERT INTO hwids (user_id, hwid) VALUES (?, ?)',
                        [userId, hwid],
                        function(err) {
                            if (err) {
                                return res.status(400).json({ error: 'HWID already registered' });
                            }
                            
                            const token = jwt.sign({ userId, username }, JWT_SECRET);
                            res.json({ 
                                token, 
                                message: 'Registration successful',
                                username: username
                            });
                        }
                    );
                }
            );
        } catch (error) {
            console.error('Registration error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    });

    // Login
    router.post('/login', (req, res) => {
        const { username, password, hwid } = req.body;

        // Basic validation
        if (!username || !password || !hwid) {
            return res.status(400).json({ error: 'All fields are required' });
        }

        db.get(
            'SELECT * FROM users WHERE username = ?',
            [username],
            async (err, user) => {
                if (err || !user) {
                    return res.status(400).json({ error: 'Invalid credentials' });
                }

                const validPassword = await bcrypt.compare(password, user.password);
                if (!validPassword) {
                    return res.status(400).json({ error: 'Invalid credentials' });
                }

                // Check HWID
                db.get(
                    'SELECT * FROM hwids WHERE user_id = ? AND hwid = ?',
                    [user.id, hwid],
                    (err, hwidRecord) => {
                        if (err || !hwidRecord) {
                            return res.status(400).json({ error: 'HWID not authorized for this account' });
                        }

                        const token = jwt.sign({ userId: user.id, username }, JWT_SECRET);
                        res.json({ 
                            token, 
                            message: 'Login successful',
                            username: username
                        });
                    }
                );
            }
        );
    });

    return router;
};
